import unittest
import os
from database import Database, DataType


class TestDatabaseSystem(unittest.TestCase):

    def setUp(self):
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        self.test_db_name = "test_db"
        self.db = Database(self.test_db_name)
        self.db.connect()

    def tearDown(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if self.db.connection:
            self.db.disconnect()
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if os.path.exists(f"databases/{self.test_db_name}.db"):
            os.remove(f"databases/{self.test_db_name}.db")
        if os.path.exists("test_save.json"):
            os.remove("test_save.json")

    def test_1_create_database_and_tables(self):
        """–¢–µ—Å—Ç 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —Ç–∞–±–ª–∏—Ü—å –∑ —É—Å—ñ–º–∞ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–∏—Ö"""
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è enum —Ç–∏–ø—ñ–≤
        self.db.define_enum('department', ['IT', 'HR', 'Finance'])
        self.db.define_enum('status', ['active', 'inactive'])

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ —É—Å—ñ–º–∞ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–∏—Ö
        fields = {
            'name': {'type': DataType.STRING},
            'age': {'type': DataType.INTEGER},
            'salary': {'type': DataType.REAL},
            'grade': {'type': DataType.CHAR},
            'email': {'type': DataType.EMAIL},
            'department': {'type': DataType.ENUM, 'enum_name': 'department'},
            'status': {'type': DataType.ENUM, 'enum_name': 'status'}
        }

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        result = self.db.create_table('employees', fields)
        self.assertTrue(result)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Ç–∞–±–ª–∏—Ü—è –¥–æ–¥–∞–Ω–∞ –¥–æ —Å–ø–∏—Å–∫—É
        table_names = [table['name'] for table in self.db.tables]
        self.assertIn('employees', table_names)

        print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω–æ: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")

    def test_2_data_validation_and_crud_operations(self):
        """–¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Ç–∞ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        fields = {
            'name': {'type': DataType.STRING},
            'age': {'type': DataType.INTEGER},
            'email': {'type': DataType.EMAIL}
        }
        self.db.create_table('users', fields)

        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó - –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        valid_data = {'name': 'John Doe', 'age': '25', 'email': 'john@example.com'}
        row_id = self.db.add_row('users', valid_data)
        self.assertIsNotNone(row_id)

        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó - –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π email
        invalid_data = {'name': 'Jane Doe', 'age': '30', 'email': 'invalid-email'}
        with self.assertRaises(ValueError):
            self.db.add_row('users', invalid_data)

        # –¢–µ—Å—Ç —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        rows = self.db.get_rows('users')
        self.assertEqual(len(rows), 1)
        self.assertEqual(rows[0]['name'], 'John Doe')

        # –¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        update_success = self.db.update_row('users', row_id,
                                            {'name': 'John Updated', 'age': '26', 'email': 'john@company.com'})
        self.assertTrue(update_success)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        rows = self.db.get_rows('users')
        self.assertEqual(rows[0]['name'], 'John Updated')

        # –¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        delete_success = self.db.delete_row('users', row_id)
        self.assertTrue(delete_success)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        rows = self.db.get_rows('users')
        self.assertEqual(len(rows), 0)

        print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω–æ: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å")

    def test_3_table_intersection_individual(self):
        """–¢–µ—Å—Ç 3: –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è - –ø–µ—Ä–µ—Ç–∏–Ω —Ç–∞–±–ª–∏—Ü—å"""
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è enum
        self.db.define_enum('dept', ['IT', 'HR'])

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–æ—Ö —Ç–∞–±–ª–∏—Ü—å –∑—ñ —Å–ø—ñ–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
        fields1 = {
            'emp_name': {'type': DataType.STRING},
            'department': {'type': DataType.ENUM, 'enum_name': 'dept'}
        }
        fields2 = {
            'proj_name': {'type': DataType.STRING},
            'department': {'type': DataType.ENUM, 'enum_name': 'dept'}
        }

        self.db.create_table('employees', fields1)
        self.db.create_table('projects', fields2)

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.db.add_row('employees', {'emp_name': 'John', 'department': 'IT'})
        self.db.add_row('employees', {'emp_name': 'Jane', 'department': 'HR'})
        self.db.add_row('employees', {'emp_name': 'Bob', 'department': 'IT'})

        self.db.add_row('projects', {'proj_name': 'Website', 'department': 'IT'})
        self.db.add_row('projects', {'proj_name': 'HR System', 'department': 'HR'})
        self.db.add_row('projects', {'proj_name': 'Mobile App', 'department': 'IT'})

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ç–∏–Ω—É —Ç–∞–±–ª–∏—Ü—å
        result_table = self.db.intersect_tables('employees', 'projects', ['department'])

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        rows = self.db.get_rows(result_table)
        self.assertEqual(len(rows), 2)  # –î–≤–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–¥—ñ–ª–∏

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–º—ñ—Å—Ç—É
        departments = [row['department'] for row in rows]
        self.assertIn('IT', departments)
        self.assertIn('HR', departments)

        print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω–æ: –ü–µ—Ä–µ—Ç–∏–Ω —Ç–∞–±–ª–∏—Ü—å –ø—Ä–∞—Ü—é—î")

    def test_4_save_and_load_database(self):
        """–¢–µ—Å—Ç 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–¥–æ–¥–∞—Ç–∫–æ–≤–∏–π)"""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        self.db.define_enum('status', ['active', 'inactive'])
        fields = {
            'name': {'type': DataType.STRING},
            'status': {'type': DataType.ENUM, 'enum_name': 'status'}
        }
        self.db.create_table('test_table', fields)

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        self.db.add_row('test_table', {'name': 'Test User', 'status': 'active'})

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.db.save_to_disk('test_save.json')
        self.assertTrue(os.path.exists('test_save.json'))

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç
        new_db = Database('loaded_db')
        new_db.load_from_disk('test_save.json')

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞
        self.assertEqual(len(new_db.tables), 1)
        self.assertEqual(new_db.tables[0]['name'], 'test_table')

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ enum definitions
        self.assertIn('status', new_db.enum_definitions)
        self.assertEqual(new_db.enum_definitions['status'], ['active', 'inactive'])

        # –û—á–∏—â–µ–Ω–Ω—è
        if os.path.exists("databases/loaded_db.db"):
            os.remove("databases/loaded_db.db")

        print("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω–æ: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –≤–∏–≤–æ–¥–æ–º"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–Ü–í –°–ò–°–¢–ï–ú–ò –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ë–ê–ó–ê–ú–ò –î–ê–ù–ò–•")
    print("=" * 60)
    print("üìã –£–º–æ–≤–∞: 3+ —Ç–µ—Å—Ç–∏, –æ–¥–∏–Ω –¥–ª—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó")
    print("=" * 60)

    # –°—Ç–≤–æ—Ä—é—î–º–æ test suite
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestDatabaseSystem)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)

    print("=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {len(result.failures)}")
    print(f"‚ö†Ô∏è  –¢–µ—Å—Ç—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {len(result.errors)}")

    if result.wasSuccessful():
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("üìù –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º:")
        print("   ‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∏–ø—ñ–≤: integer, real, char, string, enum, email ‚úì")
        print("   ‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ë–î —Ç–∞ —Ç–∞–±–ª–∏—Ü—å ‚úì")
        print("   ‚Ä¢ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö ‚úì")
        print("   ‚Ä¢ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó ‚úì")
        print("   ‚Ä¢ –ü–µ—Ä–µ—Ç–∏–Ω —Ç–∞–±–ª–∏—Ü—å (—ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è) ‚úì")
        print("   ‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚úì")
    else:
        print("üí• –Ñ –ü–†–û–ë–õ–ï–ú–ò –ó –¢–ï–°–¢–ê–ú–ò!")

    return result.wasSuccessful()


if __name__ == '__main__':
    run_tests()