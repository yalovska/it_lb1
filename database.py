import sqlite3
import json
import re
import os
from enum import Enum
from typing import List, Dict, Any


class DataType(Enum):
    INTEGER = "integer"
    REAL = "real"
    CHAR = "char"
    STRING = "string"
    ENUM = "enum"
    EMAIL = "email"


class Database:
    def __init__(self, name: str):
        self.name = name
        self.connection = None
        self.tables = []
        self.enum_definitions = {}

    def connect(self):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            if not os.path.exists('databases'):
                os.makedirs('databases')

            db_path = f"databases/{self.name}.db"
            self.connection = sqlite3.connect(db_path, check_same_thread=False)
            self.connection.row_factory = sqlite3.Row

            print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_path}")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return False

    def disconnect(self):
        """–í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        if self.connection:
            self.connection.close()
            print("‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")

    def define_enum(self, enum_name: str, values: List[str]):
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ—á—É–≤–∞–Ω–æ–≥–æ —Ç–∏–ø—É"""
        if not enum_name or not values:
            raise ValueError("Enum name and values cannot be empty")

        cleaned_values = [str(value).strip() for value in values if str(value).strip()]
        self.enum_definitions[enum_name] = cleaned_values
        print(f"‚úÖ –ü–µ—Ä–µ–ª—ñ—á—É–≤–∞–Ω–∏–π —Ç–∏–ø '{enum_name}' –≤–∏–∑–Ω–∞—á–µ–Ω–æ: {cleaned_values}")
        return True

    def create_table(self, table_name: str, fields: Dict[str, Dict]):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ"""
        if not table_name or not fields:
            raise ValueError("Table name and fields cannot be empty")

        if not self.connection:
            raise ValueError("Database not connected")

        cursor = self.connection.cursor()

        try:
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—É - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–ª—è –∑ —Å–ª–æ–≤–Ω–∏–∫–∞, –Ω–µ –¥–æ–¥–∞—î–º–æ –∑–∞–π–≤–∏–π id
            field_definitions = []
            for field_name, field_info in fields.items():
                field_definitions.append(f"{field_name} TEXT")

            # –î–æ–¥–∞—î–º–æ PRIMARY KEY –æ–∫—Ä–µ–º–æ
            create_query = f"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY AUTOINCREMENT, {', '.join(field_definitions)})"
            print(f"üìù –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç: {create_query}")

            cursor.execute(create_query)
            self.connection.commit()

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—é
            table_info = {
                'name': table_name,
                'fields': fields
            }
            self.tables.append(table_info)

            print(f"‚úÖ –¢–∞–±–ª–∏—Ü—é '{table_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            return True

        except sqlite3.Error as e:
            print(f"‚ùå SQLite –ø–æ–º–∏–ª–∫–∞: {e}")
            self.connection.rollback()
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

    def add_row(self, table_name: str, data: Dict[str, Any]):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞"""
        if not self._validate_row_data(table_name, data):
            raise ValueError("Invalid data for table")

        cursor = self.connection.cursor()

        try:
            columns = ', '.join(data.keys())
            placeholders = ', '.join(['?' for _ in data])
            values = [str(value) for value in data.values()]

            insert_query = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
            cursor.execute(insert_query, values)
            self.connection.commit()

            row_id = cursor.lastrowid
            print(f"‚úÖ –†—è–¥–æ–∫ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ (ID: {row_id})")
            return row_id

        except sqlite3.Error as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞: {e}")
            self.connection.rollback()
            raise

    def get_rows(self, table_name: str):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ"""
        cursor = self.connection.cursor()
        try:
            cursor.execute(f"SELECT * FROM {table_name}")
            columns = [description[0] for description in cursor.description]
            rows = cursor.fetchall()

            result = []
            for row in rows:
                row_dict = dict(zip(columns, row))
                result.append(row_dict)

            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(result)} —Ä—è–¥–∫—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}'")
            return result

        except sqlite3.Error as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return []

    def update_row(self, table_name: str, row_id: int, data: Dict[str, Any]):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞"""
        if not self._validate_row_data(table_name, data):
            raise ValueError("Invalid data for table")

        cursor = self.connection.cursor()

        try:
            set_clause = ', '.join([f"{key} = ?" for key in data.keys()])
            values = [str(value) for value in data.values()]
            values.append(row_id)

            update_query = f"UPDATE {table_name} SET {set_clause} WHERE id = ?"
            cursor.execute(update_query, values)
            self.connection.commit()

            success = cursor.rowcount > 0
            if success:
                print(f"‚úÖ –†—è–¥–æ–∫ –∑ ID {row_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return success

        except sqlite3.Error as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞: {e}")
            self.connection.rollback()
            raise

    def delete_row(self, table_name: str, row_id: int):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞"""
        cursor = self.connection.cursor()
        try:
            cursor.execute(f"DELETE FROM {table_name} WHERE id = ?", (row_id,))
            self.connection.commit()

            success = cursor.rowcount > 0
            if success:
                print(f"‚úÖ –†—è–¥–æ–∫ –∑ ID {row_id} –≤–∏–¥–∞–ª–µ–Ω–æ")
            return success

        except sqlite3.Error as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞: {e}")
            self.connection.rollback()
            raise

    def _validate_email(self, email: str) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è email –∞–¥—Ä–µ—Å–∏"""
        if not isinstance(email, str) or not email:
            return False
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None

    def _validate_enum(self, value: str, enum_name: str) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ–ª—ñ—á—É–≤–∞–Ω–æ–≥–æ —Ç–∏–ø—É"""
        if enum_name not in self.enum_definitions:
            return False
        return value in self.enum_definitions[enum_name]

    def _validate_row_data(self, table_name: str, data: Dict[str, Any]) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Ä—è–¥–∫–∞"""
        table_info = next((table for table in self.tables if table['name'] == table_name), None)
        if not table_info:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü—è '{table_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return False

        for field_name, value in data.items():
            if field_name not in table_info['fields']:
                print(f"‚ùå –ü–æ–ª–µ '{field_name}' –Ω–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}'")
                return False

            field_info = table_info['fields'][field_name]
            field_type = field_info['type']

            if not value and field_type != DataType.INTEGER and field_type != DataType.REAL:
                continue

            try:
                if field_type == DataType.INTEGER:
                    if value:
                        int(value)
                elif field_type == DataType.REAL:
                    if value:
                        float(value)
                elif field_type == DataType.CHAR:
                    if value and (not isinstance(value, str) or len(value) != 1):
                        return False
                elif field_type == DataType.EMAIL:
                    if value and not self._validate_email(value):
                        return False
                elif field_type == DataType.ENUM:
                    if value:
                        enum_name = field_info.get('enum_name')
                        if not enum_name or not self._validate_enum(value, enum_name):
                            return False
            except (ValueError, TypeError):
                return False

        return True

    def intersect_tables(self, table1_name: str, table2_name: str, common_fields: List[str]) -> str:
        """–ü–µ—Ä–µ—Ç–∏–Ω –¥–≤–æ—Ö —Ç–∞–±–ª–∏—Ü—å –ø–æ —Å–ø—ñ–ª—å–Ω–∏–º –ø–æ–ª—è–º"""
        print(f"üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ—Ç–∏–Ω —Ç–∞–±–ª–∏—Ü—å '{table1_name}' —ñ '{table2_name}' –ø–æ –ø–æ–ª—è—Ö: {common_fields}")

        try:
            table1_data = self.get_rows(table1_name)
            table2_data = self.get_rows(table2_name)

            result_table_name = f"intersect_{table1_name}_{table2_name}"

            table1_info = next((table for table in self.tables if table['name'] == table1_name), None)
            result_fields = {}

            for field in common_fields:
                if table1_info and field in table1_info['fields']:
                    result_fields[field] = table1_info['fields'][field]

            self.create_table(result_table_name, result_fields)

            common_rows = []
            for row1 in table1_data:
                for row2 in table2_data:
                    match = True
                    for field in common_fields:
                        if row1.get(field) != row2.get(field):
                            match = False
                            break

                    if match:
                        common_data = {field: row1[field] for field in common_fields}
                        if common_data not in common_rows:
                            common_rows.append(common_data)

            for row_data in common_rows:
                self.add_row(result_table_name, row_data)

            print(f"‚úÖ –ü–µ—Ä–µ—Ç–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é '{result_table_name}' –∑ {len(common_rows)} —Ä—è–¥–∫–∞–º–∏")
            return result_table_name

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—É —Ç–∞–±–ª–∏—Ü—å: {e}")
            raise

    def save_to_disk(self, filename: str):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–∞ –¥–∏—Å–∫"""
        try:
            database_info = {
                'name': self.name,
                'tables': self.tables,
                'enum_definitions': self.enum_definitions
            }

            serializable_info = json.loads(
                json.dumps(database_info, default=lambda x: x.value if isinstance(x, Enum) else str(x)))

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(serializable_info, f, indent=2, ensure_ascii=False)

            print(f"üíæ –ë–∞–∑—É –¥–∞–Ω–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
            raise

    def load_from_disk(self, filename: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –¥–∏—Å–∫—É"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                database_info = json.load(f)

            self.name = database_info['name']
            self.enum_definitions = database_info.get('enum_definitions', {})

            self.tables = []
            for table_info in database_info['tables']:
                restored_table = {
                    'name': table_info['name'],
                    'fields': {}
                }

                for field_name, field_data in table_info['fields'].items():
                    restored_table['fields'][field_name] = {
                        'type': DataType(field_data['type']),
                        'enum_name': field_data.get('enum_name')
                    }

                self.tables.append(restored_table)

            print(f"üìÇ –ë–∞–∑—É –¥–∞–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É: {filename}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
            raise